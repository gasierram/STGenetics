@page "/farm"

@using BlazorApp.Services;

@using BlazorCrudShared;
@using CurrieTechnologies.Razor.SweetAlert2;
@using MatBlazor

@inject IAnimalService animalService
@inject SweetAlertService Swal;
@inject NavigationManager navigation;

<h3>Animal Page</h3>

<a class="btn btn-warning" href="create"> Create New Animal</a>
<br />

<EditForm Model="animal">


    <MatTextField Label="Name"@bind-Value="@filterName"></MatTextField>
    
    <MatSelect Label="Select" @bind-Value="animal.Breed">
        <MatOptionString Value=""></MatOptionString>
        <MatOptionString Value="Holstein">Holstein</MatOptionString>
        <MatOptionString Value="Angus">Angus</MatOptionString>
        <MatOptionString Value="Jersey">Jersey</MatOptionString>
        <MatOptionString Value="Charolais">Charolais</MatOptionString>
    </MatSelect>
    
    <MatTextField Label="Price" @bind-Value="@filterPrice"></MatTextField>

    <MatButton Type="submit" @onclick="Filter">Filter</MatButton>
</EditForm>
@if(animals == null)
{
    <h4>No data</h4>
}
else
{


    <div class="animal-grid">
        <MatTable Items="@filteredAnimals" class="mat-elevation-z8" Page="currentPage" PageSize="10" Footer="true">
            <MatTableHeader>
                <th>Name</th>
                <th>Breed</th>
                <th>Birth</th>
                <th>Sex</th>
                <th>Price</th>
                <th>Status</th>
                <th></th>
            </MatTableHeader>
            <MatTableRow>
                <td><input type="checkbox" /></td>
                <td>@context.Name</td>
                <td>@context.Breed</td>
                <td>@context.BirthDate.ToShortDateString()</td>
                <td>@context.Sex</td>
                <td>@context.Price</td>
                <td>@context.Status</td>
                <td>
                    <button @onclick="() => EditAnimal(context)">Edit</button>
                    <button @onclick="() => DeleteAnimal(context.AnimalId)">Delete</button>
                </td>
                <tr>
                    <td colspan="6"></td>
                    <td>Total:</td>
                    <td>@totalPrice</td>
                </tr>
            </MatTableRow>
        </MatTable>
    </div>

}


    @code {
        List<AnimalDTO>? animals = null;
        AnimalDTO animal = new AnimalDTO();
    private decimal totalPrice;
    protected override async Task OnInitializedAsync()
    {
        animals = await animalService.GetAnimals();
    }   

    // Método para editar un animal
    private void EditAnimal(AnimalDTO animal)
    {
        navigation.NavigateTo($"/create/{animal.AnimalId}");
    }

    // Método para eliminar un animal
    private async Task DeleteAnimal(int id)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Delete Animal",
            Text = "Are you sure?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true

        });
        if (result.IsConfirmed)
            animals = animals!.FindAll(a => a.AnimalId == id);
    }


    private List<AnimalDTO> filteredAnimals;
    private int currentPage = 1;

    private string filterName;
    private string filterBreed;
    private decimal? filterPrice;

    private void Filter()
    {
        filteredAnimals = animals
            .Where(a =>
                (string.IsNullOrEmpty(filterName) || a.Name.Contains(filterName, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrEmpty(filterBreed) || a.Breed.Contains(filterBreed, StringComparison.OrdinalIgnoreCase)) &&
                (!filterPrice.HasValue || a.Price == filterPrice.Value))
            .ToList();
    }
}